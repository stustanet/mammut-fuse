# This is the MammutFS configuration file, it is in libconfig-format
# see: http://www.hyperrealm.com/libconfig/libconfig_manual.html#Configuration-Files
# for a detailed reference.

# Any option provided here can be overwritten via a command line option
# for example adding `--loglevel TRACE` in your command line will overwrite
# the path that is provided here.
# Also, if any option is missing mammutfs will not start.
# THERE ARE NO DEFAULT VALUES!
# This is to ensure that all options are properly set and you think about what
# you are doing.
# IF you want to use this in the real thing - split it up into several files and
# include them:
# One with the basic settings, like raids, anonfile, anonuser, ...
# one with the user mount options (omit mountpoint and username here!)
# one with the anon mount options (define mountpoint and username here!)

# Some options can also be changed via the mammutfsd, refere to this for details.

# Following defines the RAIDs, these pathes are used as base pathes
# for all mappings (including the anon and public mapping)
# Include in this list all directories that contain any of /anonym, /backup,
# /public /private and so on.
# If you list too many here, it is no problem.
raids = [
	"/tmp/mammut-fuse/raids/raid0",
	"/tmp/mammut-fuse/raids/raid1",
	"/tmp/mammut-fuse/raids/raid2",
	"/tmp/mammut-fuse/common"
];

# The point where
mountpoint = "/tmp/mammut-fuse/mnt";
#username = "johannes";
username = "mammutfs";

# The loglevel is any of: TRACE; INFO; WARN; ERROR
# The meaning if these are:
# TRACE: You want to see traces of every single syscall that is traced through
#        Mammutfs. You only want to be setting this if you know what you are doing.
#        Do not set this if it is tunneled into syslog or started via systemd.
#        Also: It has to be compiled with -DENABLE_TRACELOG
#        If you want to also see getattr traces (really noisy), compile with
#        -DTRACE_GETATTR
# INFO:  For low-level information about getting the thing into production and
#        See a couple of messages what happens during startup - and why the fuck
#        it is not working
# WARN:  Something has fucked up during configuration, which you should
#        definately take a look at - but it is not fatally and it can continue
#        If you see warnings, you should not deploy
# ERROR: Something has failed terribly, most of the time being fatal.
#        If you see errors, you should not deploy.
loglevel = "TRACE";

# You can start the filesystem by telling it to non-daemonize (passing -f to
# fuse) and therefore you will see all problems in stdout.
# You want to use this to debug any problems that arise while getting it up and
# running. Just unmount any other running instance beforehand (althought it would
# still work - it might be strange what you see there.
deamonize = "false";

# Which modules should be loaded by this instance of mammutfs.
# "default" should always be included, else you would not see a root file listing.
# Options as of 2018-07 are: default,private,public,anonymous,backup,lister
modules = [ "default", "private", "public", "anonym", "backup", "authorized_keys", "lister" ];

# see man truncate(1) for details: this is the maximum filesize we allow to be
# trunced, so that noone can create insanely huge sparsefiles to confuse any
# parser.
truncate_maxsize = "1073741824"; # 1G

# To mount a filesystem via NFS it is neccessary to track underlying native fds.
# this option is to control how many of these will be traced and kept open.
# if the number is excceeded, the files are closed transparently in the background
# and reopened upon interaction.
max_native_fds = "0";

# The /lister directory's owner, should not have any permissions on the
#  filesystem. It is used to anonymize the public directory listing.
# the public anon share can also be mounted as this user, as long as it does not
# have any real permissions to the underlying filesystrem.
anon_user_name = "nobody";

# The user of the backupping process
# This user will be be granted access to all backup/* -R files via ACL.
backupuser = "nobody";

# Where is the anon mapping file located.
# This file is for cacheing the anon mapping to be identical for all views.
# It has to be writeable for the mammutfsd user (in order to update it)
# and readable by all mammutfs instance users.
anon_mapping_file = "/tmp/mammut-fuse/fuse.anon.map";

# The communication socket with mammutfsd. Any running instance will try to
# connect to this daemon and announce its presence and any filechanges.
daemon_socket = "/tmp/mammut-fuse/mammutfsd.sock";

# configuration options for mammutfsd
# The daemon primarily controls new files and collects reports from different
# plugins
mammutfsd: {
	# Mammutfsd can be extended via plugins.
	# These are to be used. They have to be found within the mammutfsd-directory.
	plugins = ( "mammutfsd_mammutfs", "mammutfsd_redis" )

	# Should the interaction between mammutfsd and the world
	# "net": open a TCP connection at 127.0.0.1 and the port configured below
	# "stdin": accept commands from stdin
	# The output will always be to stdout, except when a client has connected,
	# then it will be sent to this tcp connection.
	interaction = "net";

	# The port to use if interaction is set on "net"
	port = 1337;
}

# Configuration for the mammutfsd_redis plugin to push all changed and created
#  files into a redis database for an indexer service.
redis: {
	# the server to connect to
	redis_server = "localhost"
	# the table to push into.
	redis_table = "pending"
}
